import numpy as np 
import armParam as P
import dill 
dill.settings['recurse'] = True

class armDynamics:
    def __init__(self, alpha=0.0):
        # Initial state conditions
        self.state = np.array([
            [P.theta0],      # initial angle
            [P.thetadot0]    # initial angular rate
        ])  
        # Mass of the arm, kg
        self.m = P.m * (1.+alpha*(2.*np.random.rand()-1.))
        # Length of the arm, m
        self.ell = P.ell * (1.+alpha*(2.*np.random.rand()-1.))
        # Damping coefficient, Ns
        self.b = P.b * (1.+alpha*(2.*np.random.rand()-1.))  
        # the gravity constant is well known, so we don't change it.
        self.g = P.g
        # sample rate at which the dynamics are propagated
        self.Ts = P.Ts  
        self.torque_limit = P.tau_max
        self.eom = dill.load(open("eom_case_study_A", "rb"))

    def update(self, u):
        # This is the external method that takes the input u at time
        # t and returns the output y at time t.
        # saturate the input torque
        u = saturate(u, self.torque_limit)
        self.rk4_step(u)  # propagate the state by one time sample
        y = self.h()  # return the corresponding output
        return y

    def f(self, state, tau):
        # Return xdot = f(x,u), the system state update equations

        # make sure u is a 1D array - because we made u a 1D array 
        # when we generated the eom function using "lambdify"
        u = np.array([u])

        # call the function that was generated by lambdify
        xdot = self.eom(state, tau, self.m, self.ell, self.b, self.g)

        # we will need to reshape the xdot list back into a 2D column vector
        xdot = xdot.reshape(state.shape)

        return xdot

    def h(self):
        # return y = h(x) - this is a model of what we can measure, and the output we are
        # trying to control. In this case, we can measure the angle of the robot arm. 
        theta = self.state[0][0]
        y = np.array([[theta]])

        return y

    def rk4_step(self, u):
        # Integrate ODE using Runge-Kutta RK4 algorithm
        F1 = self.eom(self.state, u)
        F2 = self.eom(self.state + self.Ts / 2 * F1, u)
        F3 = self.eom(self.state + self.Ts / 2 * F2, u)
        F4 = self.eom(self.state + self.Ts * F3, u)
        self.state = self.state + self.Ts / 6 * (F1 + 2*F2 + 2*F3 + F4)

    
def saturate(u, limit):
    if abs(u) > limit:
        u = limit * np.sign(u)
    return u
